{"version":3,"sources":["Components/CardList/CardList.module.scss","Components/Button/Button.module.scss","Components/SearchBar/index.js","Components/SearchBar/SearchBar.jsx","Components/Button/index.js","Components/Button/Button.jsx","Components/CardList/CardList.jsx","Container/App/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","placeholder","value","this","props","searchText","onChange","setSearchText","Component","Button","className","styles","styleButton","onClick","method","text","CardList","state","names","event","target","setState","addName","concat","generateTeam","console","log","newlist","document","querySelector","randomNumber","Math","floor","random","length","splice","innerHTML","splitTeamInHalf","twoTeam","shuffledNames","shuffle","divideArrayByTwo","splitTeamIntoPairs","myArray","chunk_size","results","push","another","threeTeam","shuffleNamesTwo","result","i","reset","array","copy","n","wrapper","addToList","main","allContent","list","map","name","half","pairs","container","row","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b235eafc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addToList\":\"CardList_addToList__1DGTn\",\"allContent\":\"CardList_allContent__XUB6W\",\"wrapper\":\"CardList_wrapper__26NRo\",\"main\":\"CardList_main__CRy7l\",\"title-container\":\"CardList_title-container__3F75F\",\"title-container__title\":\"CardList_title-container__title__21YFS\",\"title-container__subtitle\":\"CardList_title-container__subtitle__1H-cF\",\"form-container\":\"CardList_form-container__3P_ab\",\"weather__info\":\"CardList_weather__info__3WDLK\",\"weather__key\":\"CardList_weather__key__1tYG6\",\"weather__value\":\"CardList_weather__value__Rvleh\",\"weather__error\":\"CardList_weather__error__1Jv2P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"styleButton\":\"Button_styleButton__29ot_\"};","import SearchBar from \"./SearchBar\";\r\n\r\nexport default SearchBar;","import React, { Component } from \"react\";\r\nimport styles from \"./SearchBar.module.scss\"\r\n\r\nclass SearchBar extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <input \r\n                    placeholder = \"Enter name...\"\r\n                    value = {this.props.searchText}\r\n                    onChange = {this.props.setSearchText}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import Button from \"./Button\";\r\n\r\nexport default Button;","import React, { Component } from \"react\";\r\nimport styles from \"./Button.module.scss\";\r\n\r\nclass Button extends Component {\r\n    render(){\r\n        return(\r\n            <div className = {styles.styleButton}>\r\n            <button onClick={this.props.method}>{this.props.text}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Button;","import React, { Component } from \"react\";\r\nimport SearchBar from \"../SearchBar\";\r\nimport Button from \"../Button\";\r\nimport styles from \"./CardList.module.scss\"\r\n\r\nclass CardList extends Component {\r\n    state = {\r\n        searchText: \"\",\r\n        names: [],\r\n\r\n    }\r\n\r\n    //everytime you search something in search bar it pushes into the names array and then you render the names array\r\n    //render the names array using a map\r\n\r\n    // onAddItem = () => {\r\n    //     this.setState(state => {\r\n    //       const list = state.list.concat(state.value);\r\n    //       return {\r\n    //         list,\r\n    //         value: '',\r\n    //       };\r\n    //     });\r\n    //   };\r\n\r\n    setSearchText = (event) => {\r\n        const searchText = event.target.value\r\n        this.setState({ searchText })\r\n    }\r\n\r\n\r\n    addName = () => {\r\n        if (this.state.searchText !== '') { // only add a name if there's something in the searchbar\r\n\r\n            this.setState(state => {\r\n                const names = state.names.concat(state.searchText);\r\n                return {\r\n                    names,\r\n                    searchText: \"\"\r\n                }\r\n            })\r\n        }\r\n    }\r\n    //everytime you add a name, you concat that name into the names array\r\n    // render the names \r\n\r\n    generateTeam = () => {\r\n        console.log(\"Generate team here\"); // do the generating team stuff here!\r\n        const newlist = document.querySelector(\".newlist\")\r\n        const randomNumber = Math.floor(Math.random() * this.state.names.length);\r\n        const random = this.state.names.splice(randomNumber, 1);\r\n        newlist.innerHTML += `<p>${random}</p>`\r\n\r\n\r\n    }\r\n    shuffle(array) {\r\n        var copy = [], n = array.length, i;\r\n\r\n        // While there remain elements to shuffle…\r\n        while (n) {\r\n\r\n            // Pick a remaining element…\r\n            i = Math.floor(Math.random() * array.length);\r\n\r\n            // If not already shuffled, move it to the new array.\r\n            if (i in array) {\r\n                copy.push(array[i]);\r\n                delete array[i];\r\n                n--;\r\n            }\r\n\r\n        }\r\n\r\n        return copy;\r\n\r\n    }\r\n\r\n\r\n\r\n    splitTeamInHalf = () => {\r\n        const twoTeam = document.querySelector(\".two\")\r\n        const shuffledNames = this.shuffle(this.state.names)\r\n        console.log(this.state.names.length / 2)\r\n        const divideArrayByTwo = this.state.names.length / 2\r\n        const splice = shuffledNames.splice(0, divideArrayByTwo)\r\n        console.log(splice)\r\n        console.log(shuffledNames)\r\n        twoTeam.innerHTML += `<p> ${splice}</p>`\r\n        twoTeam.innerHTML += `<p>${shuffledNames}</p>`\r\n\r\n    }\r\n\r\n\r\n    splitTeamIntoPairs = (myArray, chunk_size) => {\r\n        const results = [];\r\n\r\n        while (myArray.length) {\r\n            results.push(myArray.splice(0, chunk_size));\r\n        }\r\n\r\n        return results;\r\n\r\n    }\r\n\r\n    another = () => {\r\n        const threeTeam = document.querySelector(\".three\")\r\n        const shuffleNamesTwo = this.shuffle(this.state.names)\r\n        const result = this.splitTeamIntoPairs(shuffleNamesTwo, 2);\r\n\r\n\r\n        console.log(result);\r\n        for (let i = 0; i < result.length; i++) {\r\n            console.log(result[i])\r\n            threeTeam.innerHTML += `<p>${result[i]}</p>`\r\n        }\r\n\r\n    }\r\n\r\nreset = () => {\r\n   console.log(\"reset\")\r\n}\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className = {styles.wrapper}>\r\n                   <div className={styles.addToList}>\r\n                    <SearchBar searchText={this.state.searchText} setSearchText={this.setSearchText} />\r\n                    <Button text={\"Add name to list\"} method={this.addName} /> {/* You had two buttons inside button. You should only have one as it's a single component. */}\r\n                </div>\r\n                <div className = {styles.main}>\r\n                {/* <div className = {styles.intro}>Hello, welcome to my random name generator. Have a game to play? Have work to do? At a social? Don't worry, this random name generator can help put you into the teams you need</div> */}\r\n             <div className = {styles.allContent}>\r\n                <div className={styles.list}>\r\n                    <h2>List of names:</h2>\r\n                    {/* Pass the method you want to do onClick as a prop. The Button component will execute it. */}\r\n                    {this.state.names.map(name => {\r\n                    return (<p>{name}</p>)\r\n                }\r\n                )\r\n                }\r\n                </div>\r\n                <div className={styles.random}>\r\n                    <h2>Generate random name</h2>\r\n                    <Button text={\"Generate random name\"} method={this.generateTeam} />\r\n                    <ul className=\"newlist\"></ul>\r\n\r\n                </div>\r\n                <div className={styles.half}>\r\n                    <h2>Split Teams in half</h2>\r\n                    <Button text={\"Split team in half\"} method={this.splitTeamInHalf} />\r\n                    <ul className=\"two\"></ul>\r\n\r\n                </div>\r\n                <div className={styles.pairs}>\r\n                    <h2> Split Teams into pairs</h2>\r\n                    <Button text={\"Split team into pairs\"} method={this.another} />\r\n                    <ul className=\"three\"></ul>\r\n                </div>\r\n                \r\n                <div className = {styles.container}>\r\n                <div className = {styles.row}></div>\r\n                <div className=\"col-xs-5 title-container\"></div>\r\n                <div className =\"col-xs-7-form-container\"></div>\r\n              \r\n                {/* <button className = {styles.button} onClick ={this.reset}>Reset</button> */}\r\n                </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            \r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default CardList;","import React, { Component } from \"react\";\nimport styles from \"./App.module.scss\";\nimport CardList from \"../../Components/CardList/CardList\";\n\nclass App extends Component {\n  render(){\n    return(\n      <div>\n        <CardList />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport './index.css';\nimport App from './Container/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}